486

(+ 137 349)

(- 1000 334)

(* 5 99)

(/ 10 5)

(+ 2.7 10)

(+ 21 35 12 7)

(* 25 4 12)

(+ (* 3 5) (- 10 6))

(define size 2)

size

(* 5 size)

(define pi 3.14159)
(define radius 10)
(* pi (* radius radius))
(define circumference (* 2 pi radius))
circumference

(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))

(define (square x) (* x x))

(define (sum-of-squares x y)
(+ (square x) (square y)))

(sum-of-squares 3 4)

(define (f a)
(sum-of-squares (+ a 1) (* a 2)))
(f 5)

(define (abs x)
(cond ((> x 0) x)
((= x 0) 0)
((< x 0) (- x))))
(abs -1)
(abs 1)
(abs 0)
(define (abs x)
(cond ((< x 0) (- x))
(else x)))
(abs -1)
(abs 1)
(abs 0)
(define (abs x)
(if (< x 0)
(- x)
x))
(abs -1)
(abs 1)
(abs 0)

(define x 6)
(and (> x 5) (< x 10))
(define (>= x y)
(or (> x y) (= x y)))
(>= x 6)
(define (>= x y)
(not (< x y)))
(>= x 7)

10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
b
a)
(cond ((= a 4) 6)
((= b 4) (+ 6 7 a))
(else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
((< a b) b)
(else -1))
(+ a 1))

(define (<= x y)
(not (> x y)))
(define (sum-of-squares-of-two-larger x y z)
  (cond ((and (<= x y) (<= x z)) (sum-of-squares y z))
        ((and (<= y x) (<= y z)) (sum-of-squares x z))
        (else (sum-of-squares x y))))
(sum-of-squares-of-two-larger 1 2 3)

(define (a-plus-abs-b a b)
((if (> b 0) + -) a b))
(a-plus-abs-b 2 -1)

(define (average x y)
(/ (+ x y) 2))

(define (improve guess x)
(average guess (/ x guess)))

(define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x)
x)))

(define (sqrt x)
(sqrt-iter 1.0 x))

(sqrt 9)

(sqrt (+ 100 37))

(sqrt (+ (sqrt 2) (sqrt 3)))

(square (sqrt 1000))

(sqrt (square 0.001))

(define (good-enough? guess prev-guess)
  (< (/ (abs (- guess prev-guess))
        guess)
     0.001))

(define (sqrt-iter guess prev-guess x)
  (if (good-enough? guess prev-guess)
     guess
     (sqrt-iter (improve guess x)
              guess
              x)))

(define (sqrt x)
(sqrt-iter 1.0 0.0 x))

(sqrt (square 0.001))

(define (cube x)
  (* x x x))

(define (cbrt-iter guess prev-guess x)
  (if (good-enough? guess prev-guess)
      guess
      (cbrt-iter (improve guess x)
                 guess
                 x)))

(define (improve guess x)
  (/ (+ (/ x (square guess))
        (* 2 guess))
     3))

(define (cbrt x)
  (cbrt-iter 1.0 0.0 x))

(cbrt 8)
(cbrt 27)
(cbrt 64)

(define (sqrt x)
(define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))
(define (improve guess x)
(average guess (/ x guess)))
(define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
(sqrt-iter 1.0 x))

(sqrt 100)

(define (sqrt x)
(define (good-enough? guess)
(< (abs (- (square guess) x)) 0.001))
(define (improve guess)
(average guess (/ x guess)))
(define (sqrt-iter guess)
(if (good-enough? guess)
guess
(sqrt-iter (improve guess))))
(sqrt-iter 1.0))

(sqrt 100)

(define (factorial n)
(if (= n 1)
1
(* n (factorial (- n 1)))))

(factorial 6)

(define (factorial n)
(fact-iter 1 1 n))
(define (fact-iter product counter max-count)
(if (> counter max-count)
product
(fact-iter (* counter product)
(+ counter 1)
max-count)))

(factorial 7)

(define (A x y)
(cond ((= y 0) 0)
((= x 0) (* 2 y))
((= y 1) 2)
(else (A (- x 1)
(A x (- y 1))))))

(A 1 10)

(A 2 4)

(A 3 3)

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
(f 3)
(g 3)
(h 3)
(k 3)

(define (fib n)
(cond ((= n 0) 0)
((= n 1) 1)
(else (+ (fib (- n 1))
(fib (- n 2))))))

(fib 7)

(define (fib n)
(fib-iter 1 0 n))
(define (fib-iter a b count)
(if (= count 0)
b
(fib-iter (+ a b) a (- count 1))))

(fib 8)

(define (count-change amount)
(cc amount 5))
(define (cc amount kinds-of-coins)
(cond ((= amount 0) 1)
((or (< amount 0) (= kinds-of-coins 0)) 0)
(else (+ (cc amount
(- kinds-of-coins 1))
(cc (- amount
(first-denomination kinds-of-coins))
kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
(cond ((= kinds-of-coins 1) 1)
((= kinds-of-coins 2) 5)
((= kinds-of-coins 3) 10)
((= kinds-of-coins 4) 25)
((= kinds-of-coins 5) 50)))
(count-change 100)

(define (f n)
   (if (< n 3)
       n
       (+ (f (- n 1))
          (* 2 (f (- n 2)))
          (* 3 (f (- n 3))))))
(f 5)
(f 6)
(f 7)

(define (f n)
   (if (< n 3)
       n
       (f-iter 2 1 0 n)))

(define (f-iter a b c count)
   (if (< count 3)
       a
       (f-iter (+ a (* 2 b) (* 3 c))
               a
               b
               (- count 1))))
(f 5)
(f 6)
(f 7)

(define (pascals-triangle row index)
  (cond
   ((or (= index 1) (= index row)) 1)
   (else (+ (pascals-triangle (- row 1) (- index 1))
            (pascals-triangle (- row 1) index)))))

(pascals-triangle 2 2)
(pascals-triangle 3 2)
(pascals-triangle 4 2)

(define (fast-expt b n)
(cond ((= n 0) 1)
((even? n) (square (fast-expt b (/ n 2))))
(else (* b (fast-expt b (- n 1))))))

(define (even? n)
(= (remainder n 2) 0))

(define (odd? n)
(= (remainder n 2) 1))

(fast-expt 2 10)

(define (expt-iter b n a)
   (cond ((= n 0) a)
         ((even? n) (expt-iter (square b) (/ n 2) a))
         (else (expt-iter  b (- n 1) (* a b)))))

(define (fast-expt b n)
   (expt-iter b n 1))

(fast-expt 2 10)
(fast-expt 5 5)
(fast-expt 10 10)
(fast-expt 100 100)

(define (double x)
   (+ x x))

(define (halve x)
   (/ x 2))
(define (fast-mult a b)
   (cond ((= b 0) 0)
         ((= b 1) a)
         ((even? b) (double (fast-mult a (halve b))))
         (else (+ a (fast-mult a (- b 1))))))

(fast-mult 0 100)
(fast-mult 100 100)

(define (mult-iter a b p)
   (cond ((= 0 b) p)
         ((even? b) (mult-iter (double a) (halve b) p))
         (else (mult-iter a (- b 1) (+ a p)))))

(define (mult a b)
   (mult-iter a b 0))

(mult 200 300)

(define (fib n)
   (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
   (cond ((= count 0) b)
         ((even? count)
          (fib-iter a
                    b
                    (+ (* p p) (* q q))
                    (+ (* 2 p q) (* q q))
                    (/ count 2)))
         (else (fib-iter (+ (* b q) (* a q) (* a p))
                         (+ (* b p) (* a q))
                         p
                         q
                         (- count 1)))))
(fib 10)
(fib 20)

(define (gcd a b)
(if (= b 0)
a
(gcd b (remainder a b))))

(gcd 3 4)
(gcd 10 22)

(define (smallest-divisor n)
(find-divisor n 2))

(define (next x)
  (if (= x 2) 3 (+ x 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
(= (remainder b a) 0))

(define (prime? n)
(= n (smallest-divisor n)))

(prime? 37)
(prime? 14)

(define (expmod base exp m)
(cond ((= exp 0) 1)
((even? exp)
(remainder (square (expmod base (/ exp 2) m))
m))
(else
(remainder (* base (expmod base (- exp 1) m))
m))))

(define (fermat-test n)
(define (try-it a)
(= (expmod a n n) a))
(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
(cond ((= times 0) true)
((fermat-test n) (fast-prime? n (- times 1)))
(else false)))

(fast-prime? 1331 100)
(fast-prime? 997 100)

(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)

(define (timed-prime-test n)
(newline)
(display n)
(start-prime-test n (runtime)))

(define (start-prime-test n start-time)
(if (fast-prime? n 100)
(report-prime (- (runtime) start-time))
false
))
(define (report-prime elapsed-time)
(display " *** ")
(display elapsed-time) 
true)


(define (search-for-primes a n)
  (search-for-primes-helper (next-odd a) 0 n))
 
(define (search-for-primes-helper a found n)
  (if (= found n)
      0
      (search-for-primes-helper (+ a 2)
                                (if (timed-prime-test a)
                                    (+ found 1)
                                    found)
                                n)))
 
(define (next-odd n)
  (if (even? n)
      (+ n 1)
      n))
(search-for-primes 1000000 3)
(search-for-primes 1000000000 3)


(define (fermat-test n a)
   (= (expmod a n n) a))

(define (fermat-full n)
   (define (iter a)
     (cond ((= a 1) #t)
           ((not (fermat-test n a)) #f)
           (else (iter (- a 1)))))
   (iter (- n 1)))

(fermat-full 561)

(define (square-check x m)
  (if (and (not (or (= x 1) (= x (- m 1))))
           (= (remainder (* x x) m) 1))
      0
      (remainder (* x x) m)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
          (square-check (expmod base (/ exp 2) m) m))
        (else
          (remainder (* base (expmod base (- exp 1) m))
                     m))))

(define (miller-rabin-test n)
  (define (try-it a)
     (= (expmod a (- n 1) n) 1))
  (try-it (+ 2 (random (- n 2)))))

(miller-rabin-test 561)

(define (cube x) (* x x x))

(define (sum term a next b)
(if (> a b)
0
(+ (term a)
(sum term (next a) next b))))

(define (inc n) (+ n 1))
(define (sum-cubes a b)
(sum cube a inc b))

(sum-cubes 1 10)

(define (identity x) x)

(define (sum-integers a b)
(sum identity a inc b))

(sum-integers 1 10)

(define (pi-sum a b)
(define (pi-term x)
(/ 1.0 (* x (+ x 2))))
(define (pi-next x)
(+ x 4))
(sum pi-term a pi-next b))

(* 8 (pi-sum 1 1000))

(define (integral f a b dx)
(define (add-dx x) (+ x dx))
(* (sum f (+ a (/ dx 2.0)) add-dx b)
dx))

(integral cube 0 1 0.01)

(define (simpsons-integral f a b n)
  (define (helper h)
    (define (y k)
      (f (+ a (* k h))))
    (define (term k)
      (cond ((or (= k 0) (= k n)) (y k))
            ((even? k) (* 2 (y k)))
            (else (* 4 (y k)))))
    (* (sum term 0 inc n)
       (/ h 3)))
  (helper (/ (- b a) n)))

(simpsons-integral cube 0 1.0 100)

(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

(* 8 (pi-sum 1 1000))

(define (product-r term a next b)
  (if (> a b)
      1.0
      (* (term a)
         (product-r term (next a) next b))))

(define (factorial n) 
  (product-r identity 1 inc n))

(factorial 10)

(define (pi-approximator terms)
  (define (numerator i)
    (+ i (if (odd? i) 1.0 2)))
  (define (denominator i)
    (+ i (if (odd? i) 2.0 1)))
  (define (pi-term i)
    (/ (numerator i) (denominator i)))
  (* 4.0 (product-r pi-term 1 inc terms)))

(pi-approximator 200.0)

(define (product-i term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))
(product-r identity 1 inc 10)

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (sum-integers a b)
(sum identity a inc b))

(sum-integers 1 10)

(define (product term a next b)
  (accumulate * 1 term a next b))
 
(define (factorial n)
  (define (identity n) n)
  (product identity 1 inc n))

(factorial 6)

(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result))))
  (iter a null-value))

(factorial 6)

(define (filtered-accumulate combiner null-value predicate term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (if (predicate a)
                  (combiner (term a) result)
                  result))))
  (iter a null-value))

(define (sum-of-squares-of-primes a b)
  (filtered-accumulate + 0 prime? square a inc b))

(sum-of-squares-of-primes 1 10)

(sum-of-squares-of-primes 4 11)

(define (product-of-relative-primes n)
  (define (relatively-prime-to-n? a)
    (= (gcd a n) 1))
  (filtered-accumulate * 1 relatively-prime-to-n? identity 2 inc (- n 1)))

(product-of-relative-primes 8)

(product-of-relative-primes 4)

(product-of-relative-primes 9)

(define (pi-sum a b)
(sum (lambda (x) (/ 1.0 (* x (+ x 2))))
a
(lambda (x) (+ x 4))
b))

(* 8 (pi-sum 1 1000))

(define (integral f a b dx)
(* (sum f
(+ a (/ dx 2.0))
(lambda (x) (+ x dx))
b)
dx))

(integral cube 0 1 0.01)

(define plus4 (lambda (x) (+ x 4)))

(plus4 -1)

((lambda (x y z) (+ x y (square z))) 1 2 3)

(define (f x y)
(let ((a (+ 1 (* x y)))
(b (- 1 y)))
(+ (* x (square a))
(* y b)
(* a b))))

(f 1 2)

(define x 5)

(+ (let ((x 3))
(+ x (* x 10)))
x)

(define x 2)

(let ((x 3)
(y (+ x 2)))
(* x y))

(define (search f neg-point pos-point)
(let ((midpoint (average neg-point pos-point)))
(if (close-enough? neg-point pos-point)
midpoint
(let ((test-value (f midpoint)))
(cond ((positive? test-value)
(search f neg-point midpoint))
((negative? test-value)
(search f midpoint pos-point))
(else midpoint))))))

(define (close-enough? x y)
(< (abs (- x y)) 0.001))

(define (half-interval-method f a b)
(let ((a-value (f a))
(b-value (f b)))
(cond ((and (negative? a-value) (positive? b-value))
(search f a b))
((and (negative? b-value) (positive? a-value))
(search f b a))
(else
(error "Values are not of opposite sign" a b)))))

(define (negative? x) (< x 0))
(define (positive? x) (> x 0))

(half-interval-method sin 2.0 4.0)

(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3))
1.0
2.0)

(define tolerance 0.00001)
(define (fixed-point f first-guess)
(define (close-enough? v1 v2)
(< (abs (- v1 v2)) tolerance))
(define (try guess)
(let ((next (f guess)))
(if (close-enough? guess next)
next
(try next))))
(try first-guess))
(fixed-point cos 1.0)
(fixed-point (lambda (y) (+ (sin y) (cos y)))
1.0)
(define (sqrt x)
(fixed-point (lambda (y) (average y (/ x y)))
1.0))
(sqrt 25)
(sqrt 2)
(fixed-point (lambda (x) (+ 1 (/ 1 x))) 2.0)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(fixed-point (lambda (x) (/ (log 1000) (log x))) 2.0)
(fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 2.0)

(define (cont-frac n d k)
  (define (frac i)
     (if (< i k)
         (/ (n i) (+ (d i) (frac (+ i 1))))
         (/ (n i) (d i))))
  (frac 1))

(cont-frac (lambda (i) 1.0)
            (lambda (i) 1.0)
            5)

(cont-frac (lambda (i) 1.0)
         (lambda (i) 1.0)
         8)

(cont-frac (lambda (i) 1.0)
         (lambda (i) 1.0)
         9)

(cont-frac (lambda (i) 1.0)
         (lambda (i) 1.0)
         10)

(define (cont-frac-iter n d k)
   (define (frac-iter i result)
       (if (= i 0)
           result
           (frac-iter (- i 1) (/ (n i) (+ (d i) result)))))
   (frac-iter (- k 1) (/ (n k) (d k))))

(cont-frac-iter (lambda (i) 1.0)
            (lambda (i) 1.0)
            5)

(cont-frac-iter (lambda (i) 1.0)
         (lambda (i) 1.0)
         8)

(cont-frac-iter (lambda (i) 1.0)
         (lambda (i) 1.0)
         9)

(cont-frac-iter (lambda (i) 1.0)
         (lambda (i) 1.0)
         10)

(define (d i)
   (if (not (= 0 (remainder (+ i 1) 3)))
       1
       (* 2 (/ (+ i 1) 3))))

(+ 2 (cont-frac (lambda (i) 1.0) d 10))

(define (tan-cf x k)
   (define (n k)
       (if (= k 1)
           x
           (- (square x))))
   (define (d k)
       (- (* 2 k) 1))
   (cont-frac n d k))
(tan-cf (/ pi 6) 10)
(tan-cf (/ pi 4) 10)
(tan-cf (/ pi 3) 10)

(define (average-damp f)
(lambda (x) (average x (f x))))

((average-damp square) 10)

(define (sqrt x)
(fixed-point (average-damp (lambda (y) (/ x y)))
1.0))

(sqrt 100)

(define (cube-root x)
(fixed-point (average-damp (lambda (y) (/ x (square y))))
1.0))

(cube-root 27)

(define (deriv g)
(lambda (x)
(/ (- (g (+ x dx)) (g x))
dx)))

(define dx 0.00001)

((deriv cube) 5)

(define (newton-transform g)
(lambda (x)
(- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
(fixed-point (newton-transform g) guess))
(define (sqrt x)
(newtons-method (lambda (y) (- (square y) x))
1.0))
(sqrt 2)

(define (fixed-point-of-transform g transform guess)
(fixed-point (transform g) guess))

(define (sqrt x)
(fixed-point-of-transform (lambda (y) (/ x y))
average-damp
1.0))

(sqrt 2)

(define (sqrt x)
(fixed-point-of-transform (lambda (y) (- (square y) x))
newton-transform
1.0))

(sqrt 3)

(define (cubic a b c)
  (lambda (x)
    (+ (* x x x)
       (* a x x)
       (* b x)
       c)))

(newtons-method (cubic 3 -2.4 6) 1)

(define (double f)
  (lambda (x) (f (f x))))
((double inc) 1)
((double square) 2)

(((double (double double)) inc) 5)

(integral cube 0 1 0.001)

(define (fermat-test n)
(define (try-it a)
(= (expmod a n n) a))
(try-it (+ 1 (random (- n 1)))))

(define (search-for-primes start end)
   (if (even? start)
       (search-for-primes (+ start 1) end)
       (cond ((< start end) (timed-prime-test start)
                            (search-for-primes (+ start 2) end)))))
(search-for-primes 1000000 1000100)

(define (compose f g)
 (lambda (x) (f (g x))))

((compose square inc) 6)
((compose inc square) 6)

(define (repeated f x)
  (if (= x 1)
      f
      (compose f (repeated f (- x 1)))))

((repeated inc 2) 5)
((repeated inc 10) 10)
((repeated square 2) 5)

(define (smooth f dx)
  (lambda (x)
    (/ (+ (f x)
          (f (+ x dx))
          (f (- x dx)))
       3)))

(define (n-fold-smooth f dx n)
  (repeated (smooth f dx) n))

((n-fold-smooth sin 0.7 2) (/ pi 2))
((n-fold-smooth sin 0.7 3) (/ pi 2))
((n-fold-smooth sin 0.7 4) (/ pi 2))

(sin (/ pi 2))
((smooth sin 0.7) (/ pi 2))

(define (log2 x)
  (/ (log x) (log 2)))

(define (nth-root x n)
  (fixed-point
      ((repeated average-damp (floor (log2 n)))
          (lambda (y) (/ x (expt y (- n 1)))))
      1.0))

(nth-root 2147483648 31) 
(nth-root 4294967296 32)
(nth-root 18446744073709551616 64)
(nth-root 340282366920938463463374607431768211456 128)

(define (iterative-improve good-enough? improve)
   (define (iter-imp guess)
     (if (good-enough? guess)
         guess
         (iter-imp (improve guess))))
   iter-imp)

(define (sqrt x)
   ((iterative-improve (lambda (guess)
                         (< (abs (- (square guess) x))
                            0.001))
                       (lambda (guess)
                         (average guess (/ x guess))))
   1.0))

(sqrt 4)
(sqrt 16)
(sqrt 100)
(sqrt 1000)

(define (fixed-point f first-guess)
   ((iterative-improve (lambda (guess)
                         (< (abs (- (f guess) guess))
                            0.00001))
                       (lambda (guess)
                         (f guess)))
    first-guess))

(fixed-point (lambda (x) (+ 1 (/ 1 x))) 2.0)