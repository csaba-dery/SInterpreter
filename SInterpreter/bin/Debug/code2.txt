(define x (cons 1 2))
(car x)
(cdr x)
(define x (cons 1 2))
(define y (cons 3 4))
(define z (cons x y))
(car (car z))
(car (cdr z))

(define (add-rat x y)
(make-rat (+ (* (numer x) (denom y))
(* (numer y) (denom x)))
(* (denom x) (denom y))))

(define (sub-rat x y)
(make-rat (- (* (numer x) (denom y))
(* (numer y) (denom x)))
(* (denom x) (denom y))))

(define (mul-rat x y)
(make-rat (* (numer x) (numer y))
(* (denom x) (denom y))))

(define (div-rat x y)
(make-rat (* (numer x) (denom y))
(* (denom x) (numer y))))

(define (equal-rat? x y)
(= (* (numer x) (denom y))
(* (numer y) (denom x))))

(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
(newline)
(display (numer x))
(display "/")
(display (denom x)))

(define one-half (make-rat 1 2))

(define one-third (make-rat 1 3))

(define (make-rat n d)
(let ((g (gcd n d)))
(cons (/ n g) (/ d g))))

(print-rat (add-rat one-third one-third))

(define (abs x)
(if (< x 0)
(- x)
x))

(define (make-rat n d)
  (let ((n-abs (abs n))
        (d-abs (abs d))
        (g (gcd n d)))
    (if (= (* n d-abs) (* d n-abs))
        (cons (/ n-abs g) (/ d-abs g))
        (cons (- (/ n-abs g)) (/ d-abs g)))))

(define x (make-rat -1 -2))
(print-rat x)

(define (print-point p)
   (newline)
   (display "(")
   (display (x-point p))
   (display ",")
   (display (y-point p))
   (display ")"))

(define (make-point x y) (cons x y))

(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment a b) (cons a b))

(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (midpoint-segment s)
    (make-point (/ (+ (x-point (start-segment s))
                     (x-point (end-segment s)))
                  2)
               (/ (+ (y-point (start-segment s))
                    (y-point (end-segment s)))
                  2)))

(define a (make-point -1 2))
(define b (make-point 3 -6))
(define s (make-segment a b))
(define m (midpoint-segment s))
(print-point m)

(define a (make-point 6.4 3))
(define b (make-point -10.7 4))
(define s (make-segment a b))
(define m (midpoint-segment s))
(print-point m)

(define (make-rect a b) (cons a b))

(define (rect-width r)
   (abs (- (x-point (car r)) (x-point (cdr r)))))

(define (rect-height r)
   (abs (- (y-point (car r)) (y-point (cdr r)))))

(define (rect-perimeter r)
   (* 2 (+ (rect-width r) (rect-height r))))

(define (rect-area r)
   (* (rect-width r) (rect-height r)))

(define a (make-point 0 0))
(define b (make-point 2 10))
(define r (make-rect a b))
(rect-perimeter r)
(rect-area r)

(define (make-rect a w h) (cons a (cons w h)))

(define (rect-width r)
   (car (cdr r)))

(define (rect-height r)
   (cdr (cdr r)))

(define a (make-point 0 0))
(define r (make-rect a 2 10))
(rect-perimeter r)
(rect-area r)

(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
   (lambda (f) (lambda (x) (f ((n f) x)))))

(define (inc n)
   (+ n 1))

((zero inc) 0)

((zero inc) 1)

((zero inc) 2)

(define one (add-1 zero))
(define two (add-1 one))
((one inc) 0)

((one inc) 1)

((two inc) 0)

((two inc) 1)

(define one
   (lambda (f) (lambda (x) (f x))))

(define two
   (lambda (f) (lambda (x) (f (f x)))))

((one inc) 0)

((one inc) 5)

((two inc) 3)

((two inc) 7)

(define (add-church m n)
   (lambda (f) (lambda (x) ((m f) ((n f) x)))))

(define three (add-church one two))
(define four (add-church two two))
(define seven (add-church three four))
((three inc) 0)

((four inc) 0)

((seven inc) 0)

(define (add-interval x y)
(make-interval (+ (lower-bound x) (lower-bound y))
(+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
(let ((p1 (* (lower-bound x) (lower-bound y)))
(p2 (* (lower-bound x) (upper-bound y)))
(p3 (* (upper-bound x) (lower-bound y)))
(p4 (* (upper-bound x) (upper-bound y))))
(make-interval (min p1 p2 p3 p4)
(max p1 p2 p3 p4))))

(define (div-interval x y)
(mul-interval x
(make-interval (/ 1.0 (upper-bound y))
(/ 1.0 (lower-bound y)))))

(define (make-interval a b) (cons a b))

(define (upper-bound interval) (cdr interval))
(define (lower-bound interval) (car interval))

(define (sub-interval x y)
   (make-interval (- (lower-bound x) (upper-bound y))
                  (- (upper-bound x) (lower-bound y)))) 

(define a (make-interval 1 10))
(define b (make-interval 50 100))
(define c (make-interval 5 20))
(sub-interval b a)
(sub-interval a b)
(sub-interval a c)
(sub-interval c a)

(define a (make-interval 2 4))
(define b (make-interval 5 10))
(define c (make-interval 10 15))
(mul-interval a b)
(mul-interval a c)